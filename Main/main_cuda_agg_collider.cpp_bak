#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

#include "SimulationCuda.h"
#include "SimulationLib.h"

unsigned int hash(unsigned int x) {

    x = x + 123; // +123 used to avoid seed = 0 which returns hash(0)=0

    x = ((x >> 16) ^ x) * 0x45d9f3b;
    x = ((x >> 16) ^ x) * 0x45d9f3b;
    x = (x >> 16) ^ x;
    return x;
}

int main(int argc, char **argv)
{
    /////////////////////////////////////////////////////////////////////////////////////////
    // get params
    /////////////////////////////////////////////////////////////////////////////////////////

    double timestep;
    double sim_time = 180.0e-6; // 30 micro seconds
    double collision_speed;
    double impact_parameter;
    double agg_size = 0.0;
    double agg_mass = 0.0;

    int material_file_index;
    int GPU_id = 0;
    unsigned int seed_agg = 0;

    int do_plot = 0;

    if(argc == 8 || argc == 9)
	{
	timestep = atof(argv[1]);
        collision_speed = atof(argv[2]);
        agg_mass = atof(argv[3]);
        impact_parameter = atof(argv[4]);
        material_file_index = 5;
        seed_agg = atoi(argv[6]);
        GPU_id = atoi(argv[7]);
	}
	else
	{
        printf("Wrong number of arguments! (%d instead of 8 || 9) Use:\n\
 -timestep\
 -collision_speed (cm/s)\
 -agglomerate mass (µg)\
 -impact_parameter\
 -material\
 -seed_agg\
 -GPU_id\
 \nor\n\
 -timestep\
 -collision_speed (cm/s)\
 -agglomerate mass (µg)\
 -impact_parameter\
 -material\
 -seed_agg\
 -GPU_id\
 -do_plot\n",
               argc);
		return EXIT_SUCCESS;
	}


    if(argc == 9)
	{
        do_plot = atoi(argv[8]);
	}

    if(GPU_id >= 0)
        cudaSetDevice(GPU_id);


    printf("Input:\n");
    printf("timestep = %.2e s\n", timestep);
    printf("collision_speed = %.2e cm/s\n", collision_speed);
    printf("agg_mass = %.2e µg\n", agg_mass);
    printf("impact_parameter = %.2e\n", impact_parameter);
    printf("material_file = %s\n", argv[material_file_index]);
    printf("seed_agg = %d\n", seed_agg);
    printf("GPU_id = %d\n", GPU_id);
    printf("do_plot = %d\n", do_plot);




    agg_size *= 1.e-4; // convert size from µm to cm


    /////////////////////////////////////////////////////////////////////////////////////
    // Output Files
    ////////////////////////////////////////////////////////////////////////////////////


    char* result_file = new char[1024];
    char* debug_file = new char[1024];

    char* shpere1_file = new char[1024];
    char* shpere2_file = new char[1024];

    sprintf(shpere1_file, "../data/init/RCRBDsphere_");
    sprintf(shpere2_file, "../data/init/RCRBDsphere_");
    sprintf(debug_file, "../data/GPU_collision_result_");
    sprintf(result_file, "../data/collision_result_");


    char buf[256];


    sprintf(buf, "_size_%d_%d_%d.dat", int(agg_mass*100.0), int(agg_size*1.e4), seed_agg);


    size_t len = strlen(argv[material_file_index]);
    strncat(shpere1_file, argv[material_file_index]+3, len-7);
    strncat(shpere2_file, argv[material_file_index]+3, len-7);

    strcat(shpere1_file, buf);
    strcat(shpere2_file, buf);



    sprintf(buf, "_size_%d_%d_%d_%d_%d_%d.dat", int(timestep/1.e-12), int(agg_mass*100), int(agg_size*1.e4), int(collision_speed), int(impact_parameter*100.0), seed_agg);


    strncat(debug_file, argv[material_file_index]+3, len-7);
    strcat(debug_file, buf);

    strncat(result_file, argv[material_file_index]+3, len-7);
    strcat(result_file, buf);





    char* energy_file = new char[1024];
    sprintf(energy_file, "../data/energiesGPU_");


    strncat(energy_file, argv[material_file_index]+3, len-7);
    strcat(energy_file, buf);


	/////////////////////////////////////////////////////////////////////////////////////////
	// setup sim sim
	/////////////////////////////////////////////////////////////////////////////////////////

	printf("Loading simulation data...\n");

	SimulationCuda sim;
    double impact_dist = collision_speed * timestep * 5000.0; // bonus time to relax
    ErrorCode error_code = SimLib::collideTwoAgglomerates(
                &sim,
                argv[material_file_index],
                shpere1_file,
                shpere2_file,
                seed_agg,
                hash(seed_agg),
                collision_speed,
                impact_parameter,
		impact_dist
                );


	if(error_code != EC_OK)
	{
		char message[200];
		sim.getErrorMessage(error_code, message);
        printf("ERROR:\nWhile setting up the collision the following error occurred:\n%s\n%s\n%s\n%s\n", message, argv[material_file_index], shpere1_file, shpere2_file);
		return EXIT_SUCCESS;
	}


    FILE *file = fopen(energy_file, "w+");
    printf("Energie file: %s\n", energy_file);
    if(file)
    {
        fprintf(file, "#number of particles: %d   aggregate size: %g    timestep: %e\n", sim.number_of_particles, agg_size * 1.e4, timestep);
        fprintf(file, "#collision speed: %g\n", collision_speed);
        fprintf(file, "#impact parameter: %g\n", impact_parameter);
        fprintf(file, "#time    coordination_number E_tot   E_kin   E_rot   V_tot   V_normal    V_rolling   V_sliding   V_twisting  diss_rolling    diss_sliding    diss_twisting   diss_damping    diss_contact    vx1 vy1 vz1     vx2 vy2 vz2\n");

        fclose(file);
    }




	/////////////////////////////////////////////////////////////////////////////////////////
	// setup cuda
	/////////////////////////////////////////////////////////////////////////////////////////

	printf("Setting up CUDA...\n");
    error_code = sim.initCuda(GPU_id);
	//sim.setDampingFactor(0.0);
	if(error_code != EC_OK)
	{
		char message[200];
		sim.getErrorMessage(error_code, message);
		printf("ERROR:\nWhile setting up CUDA the following error occurred:\n%s\n", message);
		return EXIT_SUCCESS;
	}

    error_code = sim.toggleGPUMode(true);

	if(error_code != EC_OK)
	{
		char message[200];
		sim.getErrorMessage(error_code, message);
		printf("ERROR:\nFailed to enable GPU mode!\n%s\n", message);
		return EXIT_SUCCESS;
	}

	/////////////////////////////////////////////////////////////////////////////////////////
	// start simulation
	/////////////////////////////////////////////////////////////////////////////////////////

    //sim.setPotentialVariationStopCondition(1e-5, 2.0, 500);

    error_code = sim.startSimulation(sim_time, timestep);




    // setup plot files
	if(error_code != EC_OK)
	{
		char message[200];
		sim.getErrorMessage(error_code, message);
		printf("ERROR:\nFailed to start simulation!\n%s\n", message);
		return EXIT_SUCCESS;
	}
    char plot_buf[1024];


	/////////////////////////////////////////////////////////////////////////////////////////
	// run simulation
	/////////////////////////////////////////////////////////////////////////////////////////


    sim.print_energies_interval = 100;
    sim.energies_filename = energy_file;
    sim.print_energies_counter = 0; // to print first timestep


    sim.min_end_time = sim.current_time + 11.e-6;
    sim.check_potential_variation_counter = 0;
    sim.check_potential_variation_interval = 100; //int(0.25e-6 / timestep + 0.5);


    printf("Running simulation on GPU...\n\n");
	fflush(stdout);

    char agg_plotname[1024];
    sprintf(agg_plotname, "../data/plot/collision_pos_");
    strncat(agg_plotname, argv[material_file_index]+3, len-7);


	unsigned int snapshot_counter = 0;
	unsigned int snapshot_id_counter = 0;
    unsigned int snapshot_interval = (unsigned int)(0.25e-6 / timestep + 0.5);


    if(do_plot != 0)
    { // print initial setup
        char buf[256];

        sprintf(buf, "_%d_%d_%d_%d_%d_%d.dat", int(timestep/1.e-12), int(agg_mass * 100), int(agg_size), int(collision_speed), int(impact_parameter * 100), snapshot_id_counter);

        strcpy(plot_buf, agg_plotname);
        strcat(plot_buf, buf);
        printf("%s\n", plot_buf);


        if(sim.get_use_gpu())
            sim.copySimDataFromGPU();
        SimLib::printPositions(sim, plot_buf, false, false);
        snapshot_id_counter++;
    }


    sim.GPUprintEnergies();

	while(!sim.stop_simulation)
	{
		sim.update();


            if(snapshot_counter == snapshot_interval)
            {

                sim.printGPUsimToFile(debug_file);
                sim.copySimDataFromGPU();
                sim.saveToFile(result_file, true);

                if(do_plot != 0)
                {
                    char buf[256];

                    sprintf(buf, "_%d_%d_%d_%d_%d_%d.dat", int(timestep/1.e-12), int(agg_mass * 100.0), int(agg_size), int(collision_speed), int(impact_parameter * 100), snapshot_id_counter);

                    strcpy(plot_buf, agg_plotname);
                    strcat(plot_buf, buf);
                    printf("%s\n", plot_buf);


                    if(sim.get_use_gpu())
                        sim.copySimDataFromGPU();
                    SimLib::printPositions(sim, plot_buf, false, false);
                    snapshot_id_counter++;
                }

                snapshot_counter = -1;
        }

        ++snapshot_counter;

    }

	/////////////////////////////////////////////////////////////////////////////////////////
	// finalize
	/////////////////////////////////////////////////////////////////////////////////////////

	printf("...done\n");
	fflush(stdout);

    sim.copySimDataFromGPU();
    sim.saveToFile(result_file, true);

#ifdef GPU_TRACK_NUMBER_OF_CONTACTS
    int broken_contacts, created_contacts;
    cudaMemcpy(&broken_contacts, sim.gpu_contacts_broken, sizeof(int), cudaMemcpyDeviceToHost);
    cudaMemcpy(&created_contacts, sim.gpu_contacts_created, sizeof(int), cudaMemcpyDeviceToHost);
    printf("Broken contacts: %i\nCreated contacts: %i\n", broken_contacts, created_contacts);
#endif


    delete[] result_file;
    delete[] debug_file;
    delete[] shpere1_file;
    delete[] shpere2_file;

    if(error_code != EC_OK)
    {
        char message[200];
        sim.getErrorMessage(error_code, message);
        printf("ERROR:\nWhile trying to delete Simulation\n");
        return EXIT_SUCCESS;
    }

	return EXIT_SUCCESS;
}
